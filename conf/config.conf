[redis_send]
db=0
password=my_redis_passwd
#使用sentinel则会不必设置以下两项
host=127.0.0.1
port=6379
#是否使用sentinel，注释或则不使用
#service_name=mymaster                                                        
#sentinels=[('127.0.0.1', 26479),('127.0.0.1', 26480),('127.0.0.1', 26481)]      


[redis_log]
db=1
password=my_redis_passwd
host=127.0.0.1
port=6379
#service_name=mymaster                                                        
#sentinels=[('127.0.0.1', 26479),('127.0.0.1', 26480),('127.0.0.1', 26481)]  


[redis_tmp]
db=2
password=my_redis_passwd
host=127.0.0.1
port=6379
#service_name=mymaster                                                        
#sentinels=[('127.0.0.1', 26479),('127.0.0.1', 26480),('127.0.0.1', 26481)]  


[redis_job]
db=14
password=my_redis_passwd
host=127.0.0.1
port=6379
#service_name=mymaster                                                        
#sentinels=[('127.0.0.1', 26479),('127.0.0.1', 26480),('127.0.0.1', 26481)]  


[redis_config]
db=15
password=my_redis_passwd
host=127.0.0.1
port=6379
#service_name=mymaster                                                        
#sentinels=[('127.0.0.1', 26479),('127.0.0.1', 26480),('127.0.0.1', 26481)]  


[proxy]
#是否为proxy模式
#在启动时可以在命令行指定为proxy或master，优先级为：命令行>配置文件>master模式
#默认使用proxy的ip，处于多网卡环境时可能需要手动设置
#设置为0或注释则不启用
proxy=0
#不设置或为空则使用ip，最好每个proxy唯一，如果相同则竞争处理（这是正常的）
#mark=AAA  
   

[fileserver]
# #不启用则注释
# #用于文件管理
# #web服务没有安全认证机制，请不要对外网开放  
# #web服务监听的网络 
# bind=127.0.0.1
# #web服务监听的端口
# port=9000       
# #Access-Control-Allow-Origin 允许访问的域，前后端分离时必须要设置
# origin=*  


[common]
#用于加密host的密码的对称加密key，需要跟加密时使用的key一致
#需要确保为 16 24 32 位之一，在此填入原始值，不需要任何转义
#新部署时可由以下命令新生成key
#python -c "from lib.aes_lib import AesCrypt;ac=AesCrypt();print(ac.get_key())"
aes_key=<HeK7PJpS=oE=,yN3"5;\E=>U2lbXL|W
#标记为本地地址，对本地的命令将使用本地模式运行，而不是通过ssh
#多服务架构时需要添加tag在ip后面 防止多服务间存在冲突 tag为任意值用于设置ip别名 使用时需要指定使用别名
#多个ip使用“,”分割
local_ip_list=127.0.0.1,localhost
